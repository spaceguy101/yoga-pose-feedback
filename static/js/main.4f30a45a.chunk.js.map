{"version":3,"sources":["components/posenet.js","utils.js","App.js","serviceWorker.js","index.js"],"names":["PoseNet","state","poses","componentDidMount","a","posenet","architecture","outputStride","multiplier","flipHorizontal","net","initCapture","isMobile","isAndroid","test","navigator","userAgent","isiOS","loadVideo","videoElement","setupCamera","video","play","width","height","mediaDevices","getUserMedia","mobile","facingMode","undefined","stream","srcObject","Promise","resolve","onloadedmetadata","reject","setRef","timeout","setTimeout","capture","estimateMultiplePoses","maxDetections","scoreThreshold","nmsRadius","allposes","length","setState","props","onChange","this","children","style","className","playsInline","ref","Component","getPoseVector","pose","xPos","keypoints","map","k","x","position","yPos","y","minX","Math","min","minY","vector","i","sqrt","Number","isNaN","push","cosineDistanceMatching","poseVector1","poseVector2","distance","similarity","PlayerControlExample","context","score","currentTime","interval","setInterval","findSimilarity","player","subscribeToStateChange","handleStateChange","bind","onPose","handlePoseChange","total","getAvgConfidence","nearestTime","frameInterval","num","round","roundnum","poseFromInputVideo","inputVideoPoses","toString","remark","toFixed","status","href","fluid","autoPlay","src","autoHide","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4f30a45a.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { render } from 'react-dom';\r\nimport * as posenet from '@tensorflow-models/posenet';\r\n\r\nconst MILLISECONDS = 500;\r\nconst maxVideoSize = 500;\r\n\r\nexport default class PoseNet extends Component {\r\n    state = {\r\n        poses: [],\r\n    }\r\n\r\n    componentDidMount = async () => {\r\n        this.net = await posenet.load({\r\n            architecture: 'MobileNetV1',\r\n            outputStride: 16,\r\n            multiplier: 0.75,\r\n            flipHorizontal: true\r\n        });\r\n        this.initCapture();\r\n    }\r\n\r\n    isMobile = () => {\r\n        const isAndroid = /Android/i.test(navigator.userAgent);\r\n        const isiOS = /iPhone|iPad|iPod/i.test(navigator.userAgent);\r\n        return isAndroid || isiOS;\r\n    }\r\n\r\n    loadVideo = async (videoElement) => {\r\n        const video = await this.setupCamera(videoElement);\r\n        video.play();\r\n        return video;\r\n    }\r\n\r\n    setupCamera = async (videoElement) => {\r\n        videoElement.width = maxVideoSize;\r\n        videoElement.height = maxVideoSize;\r\n\r\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n            const mobile = this.isMobile();\r\n            const stream = await navigator.mediaDevices.getUserMedia({\r\n                'audio': false,\r\n                'video': {\r\n                    facingMode: 'user',\r\n                    width: mobile ? undefined : maxVideoSize,\r\n                    height: mobile ? undefined : maxVideoSize\r\n                }\r\n            });\r\n            videoElement.srcObject = stream;\r\n\r\n            return new Promise(resolve => {\r\n                videoElement.onloadedmetadata = () => {\r\n                    resolve(videoElement);\r\n                };\r\n            });\r\n        } else {\r\n            return Promise.reject(\"\");\r\n        }\r\n    }\r\n\r\n    setRef = async (videoElement) => {\r\n        this.videoElement = videoElement;\r\n    }\r\n\r\n    initCapture = () => {\r\n        this.timeout = setTimeout(this.capture, MILLISECONDS);\r\n    }\r\n\r\n    capture = async () => {\r\n        if (!this.videoElement || !this.net) {\r\n            this.initCapture();\r\n            return;\r\n        }\r\n\r\n        if (!this.video && this.videoElement) {\r\n            this.video = await this.loadVideo(this.videoElement);\r\n        }\r\n\r\n        const allposes = await this.net\r\n            .estimateMultiplePoses(this.video, {\r\n                flipHorizontal: false,\r\n                maxDetections: 1,\r\n                scoreThreshold: 0.6,\r\n                nmsRadius: 10\r\n            })\r\n\r\n\r\n        if (allposes.length > 0) {\r\n            this.setState({ poses: allposes[0] });\r\n        }\r\n        if (this.props.onChange && allposes.length > 0) {\r\n            this.props.onChange(allposes[0]);\r\n        }\r\n        this.initCapture();\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.children) {\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div style={{ \"display\": \"inline-block\" }}>\r\n                <video className=\"video\" playsInline ref={this.setRef} />\r\n                {this.props.children(this.state.poses)}\r\n            </div>\r\n        );\r\n    }\r\n}","import similarity from 'compute-cosine-similarity';\r\n\r\nvar WIDTH = 1280;\r\nvar HEIGHT = 720;\r\n\r\nexport const getPoseVector = (pose) => {\r\n    let xPos = pose.keypoints.map(k => {\r\n        let x = k.position.x\r\n        if (x > WIDTH) {\r\n            x = WIDTH\r\n        } else if (x < 0) {\r\n            x = 0.00001\r\n        }\r\n        return x\r\n    });\r\n    let yPos = pose.keypoints.map((k) => {\r\n\r\n        let y = k.position.y\r\n        if (y > HEIGHT) {\r\n            y = HEIGHT\r\n        } else if (y < 0) {\r\n            y = 0.00001\r\n        }\r\n        return y\r\n\r\n    });\r\n\r\n    let minX = Math.min(...xPos);\r\n    let minY = Math.min(...yPos);\r\n\r\n    const vector = [];\r\n    for (let i = 0; i < xPos.length; i++) {\r\n        let x = xPos[i] - minX\r\n        let y = yPos[i] - minY\r\n        let length = Math.sqrt(x * x + y * y);\r\n        x = Number.isNaN(x / length) ? 0.00001 : x / length\r\n        y = Number.isNaN(y / length) ? 0.00001 : y / length\r\n\r\n        vector.push(x)\r\n        vector.push(y)\r\n    }\r\n    return vector;\r\n\r\n}\r\n\r\nexport const poseSimilarity = (pose1, pose2) => {\r\n    const poseVector1 = getPoseVector(pose1);\r\n    const poseVector2 = getPoseVector(pose2);\r\n    return cosineDistanceMatching(poseVector1, poseVector2);\r\n};\r\n\r\n\r\n// Cosine similarity as a distance function. The lower the number, the closer // the match\r\n// poseVector1 and poseVector2 are a L2 normalized 34-float vectors (17 keypoints each\r\n// with an x and y. 17 * 2 = 32)\r\nexport function cosineDistanceMatching(poseVector1, poseVector2) {\r\n    const cosineSimilarity = similarity(poseVector1, poseVector2);\r\n    const distance = 2 * (1 - cosineSimilarity);\r\n    return Math.sqrt(distance);\r\n}\r\n\r\n\r\n// poseVector1 and poseVector2 are 52-float vectors composed of:\r\n// Values 0-33: are x,y coordinates for 17 body parts in alphabetical order\r\n// Values 34-51: are confidence values for each of the 17 body parts in alphabetical order\r\n// Value 51: A sum of all the confidence values\r\n// Again the lower the number, the closer the distance\r\nfunction weightedDistanceMatching(poseVector1, poseVector2) {\r\n    const vector1PoseXY = poseVector1.slice(0, 34);\r\n    const vector1Confidences = poseVector1.slice(34, 51);\r\n    const vector1ConfidenceSum = poseVector1.slice(51, 52);\r\n\r\n    const vector2PoseXY = poseVector2.slice(0, 34);\r\n\r\n    // First summation\r\n    const summation1 = 1 / vector1ConfidenceSum;\r\n\r\n    // Second summation\r\n    let summation2 = 0;\r\n    for (let i = 0; i < vector1PoseXY.length; i++) {\r\n        const tempConf = Math.floor(i / 2);\r\n        const tempSum = vector1Confidences[tempConf] * Math.abs(vector1PoseXY[i] - vector2PoseXY[i]);\r\n        summation2 += tempSum;\r\n    }\r\n\r\n    return summation1 * summation2;\r\n}\r\n\r\nexport function roundnum(frameInterval, num) { return Math.round(num / frameInterval) * frameInterval; }\r\n\r\nexport function getAvgConfidence(keypoints) {\r\n\r\n    var total = 0;\r\n    for (var i = 0; i < keypoints.length; i++) {\r\n        total += keypoints[i].score;\r\n    }\r\n    return total / keypoints.length;\r\n\r\n}","import React, { Component } from \"react\";\nimport { Player, ControlBar } from \"video-react\";\nimport \"video-react/dist/video-react.css\";\nimport \"./App.css\";\nimport PoseNet from \"./components/posenet\";\nimport {\n  getAvgConfidence,\n  getPoseVector,\n  roundnum,\n  cosineDistanceMatching,\n} from \"./utils\";\nimport inputVideoPoses from \"./input.json\";\n\nconst FPS = 2;\nconst frameInterval = 1000 / FPS;\nconst SIMILARITY_THRESHOLD_EXCELLENT = 0.15;\nconst SIMILARITY_THRESHOLD_GOOD = 0.35;\nconst SIMILARITY_THRESHOLD_OKAY = 0.7;\n\nexport default class PlayerControlExample extends Component {\n  constructor(props, context) {\n    super(props, context);\n\n    this.state = {\n      score: 0,\n      pose: null,\n      currentTime: 0,\n    };\n  }\n\n  componentDidMount() {\n    // subscribe state change\n    this.isMobile =\n      /Android/i.test(navigator.userAgent) ||\n      /iPhone|iPad|iPod/i.test(navigator.userAgent);\n    this.interval = setInterval(() => this.findSimilarity(this.state), 200);\n    this.player.subscribeToStateChange(this.handleStateChange.bind(this));\n    this.onPose = this.handlePoseChange.bind(this);\n  }\n\n  findSimilarity({ pose, currentTime }) {\n    if (currentTime && pose) {\n      var avgConfidence = getAvgConfidence(pose.keypoints);\n\n      if (avgConfidence > 0.4) {\n        var nearestTime = roundnum(frameInterval, currentTime * 1000);\n        var poseFromInputVideo =\n          inputVideoPoses[(nearestTime / frameInterval).toString()];\n\n        var remark = \"\";\n        if (poseFromInputVideo) {\n          var score = cosineDistanceMatching(\n            getPoseVector(pose),\n            poseFromInputVideo\n          ).toFixed(2);\n\n          if (score < SIMILARITY_THRESHOLD_EXCELLENT) {\n            remark = `Very Good - ${score}`;\n          } else if (score < SIMILARITY_THRESHOLD_GOOD) {\n            remark = `Good - ${score}`;\n          } else if (score < SIMILARITY_THRESHOLD_OKAY) {\n            remark = `Bad - ${score}`;\n          } else {\n            remark = `Very Bad - ${score}`;\n          }\n        } else {\n          remark = \"Waiting For Instructor\";\n        }\n      } else {\n        remark = \"Please Stand in Front of Camera with Whole body visible\";\n      }\n\n      this.setState({ status: remark });\n    } else {\n      this.setState({\n        status: \"Please Stand in Front of Camera with Whole body visible\",\n      });\n    }\n  }\n\n  handlePoseChange(pose) {\n    this.setState({ pose });\n  }\n\n  handleStateChange(state) {\n    // copy player state to this component's state\n    this.setState({\n      player: state,\n    });\n    if (this.state.player) {\n      this.setState({ currentTime: this.state.player.currentTime });\n      //this.state.currentTime = this.state.player.currentTime\n      //console.log(this.state.player.currentTime)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        {this.isMobile ? (\n          <div className=\"flex-container\">\n            <div className=\"status\">Please Visit this Page On a Desktop</div>\n          </div>\n        ) : (\n          <div>\n            <header className=\"header\">\n              <a href=\"\" className=\"logo\">\n                <span className=\"logo-name\"> Yoga Pose Feedback</span>\n              </a>\n            </header>\n\n            <div className=\"flex-container\">\n              <div className=\"player-container\">\n                <div className=\"video-header\">Your Instructor 👇</div>\n                <Player\n                  fluid={false}\n                  width={640}\n                  height={360}\n                  ref={(player) => {\n                    this.player = player;\n                  }}\n                  autoPlay\n                >\n                  <source src=\"input.mp4\" />\n                  <ControlBar autoHide={false} />\n                </Player>\n              </div>\n              <div className=\"camera-container\">\n                <div className=\"video-header\">You 👇</div>\n                <PoseNet onChange={this.onPose}>\n                  {(poses) => <div></div>}\n                </PoseNet>\n              </div>\n            </div>\n            <div className=\"status\">{this.state.status}</div>\n            <div className=\"comment\">\n              The score is based on how well you copy the Instructor's pose\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}